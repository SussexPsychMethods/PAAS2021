###------------------------------------------------------------------------###
###                 Simple script for building the index page              ###
###------------------------------------------------------------------------###
require 'erb'
require 'asciidoctor'

weeks = [*1..11]

Materials = Struct.new(
  :type,
  :subtype,
  :week,
  :link,
  :week_int
)

class String
  # String
  (1..5).to_a.each do |x|
    define_method "h#{x}" do
      return '=' * x + ' ' + self if self != ''
    end
  end
  def trim
    return gsub!(/src/, '') if include?('src')
  end
end

class NilClass
  def trim
    nil
  end
end

def tidy_type(type)
  return 'lecture' if type == 'lectures'

  return 'practical' if type == 'practicals'

  return 'tutorial' if type == 'tutorials'
end

def make_link_text(type, subtype)
  if type == 'tutorials'
    tidy_type(type)
  else
    "#{tidy_type(type)} #{subtype}"
  end
end

def list_html(type, week, subtype)
  if type == 'tutorials'
    Dir["src/#{type}/#{week}/index.html"][0]
  else
    Dir["src/#{type}/#{week}/#{subtype}/index.html"][0]
  end
end

def list_pdf(type, week, subtype)
  if type == 'tutorials'
    Dir["src/#{type}/#{week}/*.pdf"][0]
  else
    Dir["src/#{type}/#{week}/#{subtype}/*.pdf"][0]
  end
end

def add_pdf_to_link(link_text, link, pdf)
  return "link:#{link.trim}[Link to #{link_text}]" if pdf.nil?

  "link:#{link.trim}[Link to #{link_text}] (link:#{pdf.trim}[pdf])"
end

def make_materials(week, week_int, type, subtype)
  link = list_html(type, week, subtype)
  pdf = list_pdf(type, week, subtype)

  return nil if link.nil?

  link_text = make_link_text(type, subtype)
  link_text = add_pdf_to_link(link_text, link, pdf)
  Materials.new(type, subtype, "Week #{week}", link_text, week_int)
end

class Lecture
  def initialize(week)
    @week = format('%<week>02d', week: week)
    @week_int = week
    @subtypes = %w[slides handout]
    @type = 'lectures'
  end

  def listfiles
    @subtypes.flat_map { |subtype| make_materials(@week, @week_int, @type, subtype) }
  end
end

class Practical
  def initialize(week)
    @week = format('%<week>02d', week: week)
    @week_int = week
    @subtypes = %w[slides worksheet]
    @type = 'practicals'
  end

  def listfiles
    @subtypes.flat_map { |subtype| make_materials(@week, @week_int, @type, subtype) }
  end
end

class Tutorial
  def initialize(week)
    @week = format('%<week>02d', week: week)
    @week_int = week
    @subtypes = %w[tutorials]
    @type = 'tutorials'
  end

  def listfiles
    @subtypes.flat_map { |subtype| make_materials(@week, @week_int, @type, subtype) }
  end
end

lecture_list = weeks.flat_map { |week| Lecture.new(week).listfiles }
lecture_list.compact!

practical_list = weeks.flat_map { |week| Practical.new(week).listfiles }
practical_list.compact!

tutorial_list = weeks.flat_map { |week| Tutorial.new(week).listfiles }
tutorial_list.compact!

puts lecture_list
puts practical_list
puts tutorial_list

template = ERB.new(File.read('./src/index.md'))

index_page = template.result_with_hash(lectureList: lecture_list,
                                       practicalList: practical_list,
                                       tutorialList: tutorial_list)
File.write('./src/index.asc', index_page)
Asciidoctor.render_file('./src/index.asc')
